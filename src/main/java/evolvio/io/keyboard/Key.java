package evolvio.io.keyboard;

import java.util.HashMap;
import java.util.Map;
import org.lwjgl.glfw.GLFW;

public enum Key {
    A(GLFW.GLFW_KEY_A),
    B(GLFW.GLFW_KEY_B),
    C(GLFW.GLFW_KEY_C),
    D(GLFW.GLFW_KEY_D),
    E(GLFW.GLFW_KEY_E),
    F(GLFW.GLFW_KEY_F),
    G(GLFW.GLFW_KEY_G),
    H(GLFW.GLFW_KEY_H),
    I(GLFW.GLFW_KEY_I),
    J(GLFW.GLFW_KEY_J),
    K(GLFW.GLFW_KEY_K),
    L(GLFW.GLFW_KEY_L),
    M(GLFW.GLFW_KEY_M),
    N(GLFW.GLFW_KEY_N),
    O(GLFW.GLFW_KEY_O),
    P(GLFW.GLFW_KEY_P),
    Q(GLFW.GLFW_KEY_Q),
    R(GLFW.GLFW_KEY_R),
    S(GLFW.GLFW_KEY_S),
    T(GLFW.GLFW_KEY_T),
    U(GLFW.GLFW_KEY_U),
    V(GLFW.GLFW_KEY_V),
    W(GLFW.GLFW_KEY_W),
    X(GLFW.GLFW_KEY_X),
    Y(GLFW.GLFW_KEY_Y),
    Z(GLFW.GLFW_KEY_Z),

    F1(GLFW.GLFW_KEY_F1),
    F2(GLFW.GLFW_KEY_F2),
    F3(GLFW.GLFW_KEY_F3),
    F4(GLFW.GLFW_KEY_F4),
    F5(GLFW.GLFW_KEY_F5),
    F6(GLFW.GLFW_KEY_F6),
    F7(GLFW.GLFW_KEY_F7),
    F8(GLFW.GLFW_KEY_F8),
    F9(GLFW.GLFW_KEY_F9),
    F10(GLFW.GLFW_KEY_F10),
    F11(GLFW.GLFW_KEY_F11),
    F12(GLFW.GLFW_KEY_F12),
    F13(GLFW.GLFW_KEY_F13),
    F14(GLFW.GLFW_KEY_F14),
    F15(GLFW.GLFW_KEY_F15),
    F16(GLFW.GLFW_KEY_F16),
    F17(GLFW.GLFW_KEY_F17),
    F18(GLFW.GLFW_KEY_F18),
    F19(GLFW.GLFW_KEY_F19),
    F20(GLFW.GLFW_KEY_F20),
    F21(GLFW.GLFW_KEY_F21),
    F22(GLFW.GLFW_KEY_F22),
    F23(GLFW.GLFW_KEY_F23),
    F24(GLFW.GLFW_KEY_F24),
    F25(GLFW.GLFW_KEY_F25),

    NUM_PAD_0(GLFW.GLFW_KEY_0),
    NUM_PAD_1(GLFW.GLFW_KEY_1),
    NUM_PAD_2(GLFW.GLFW_KEY_2),
    NUM_PAD_3(GLFW.GLFW_KEY_3),
    NUM_PAD_4(GLFW.GLFW_KEY_4),
    NUM_PAD_5(GLFW.GLFW_KEY_5),
    NUM_PAD_6(GLFW.GLFW_KEY_6),
    NUM_PAD_7(GLFW.GLFW_KEY_7),
    NUM_PAD_8(GLFW.GLFW_KEY_8),
    NUM_PAD_9(GLFW.GLFW_KEY_9),

    KEY_PAD_0(GLFW.GLFW_KEY_KP_0),
    KEY_PAD_1(GLFW.GLFW_KEY_KP_1),
    KEY_PAD_2(GLFW.GLFW_KEY_KP_2),
    KEY_PAD_3(GLFW.GLFW_KEY_KP_3),
    KEY_PAD_4(GLFW.GLFW_KEY_KP_4),
    KEY_PAD_5(GLFW.GLFW_KEY_KP_5),
    KEY_PAD_6(GLFW.GLFW_KEY_KP_6),
    KEY_PAD_7(GLFW.GLFW_KEY_KP_7),
    KEY_PAD_8(GLFW.GLFW_KEY_KP_8),
    KEY_PAD_9(GLFW.GLFW_KEY_KP_9),
    KEY_PAD_ADD(GLFW.GLFW_KEY_KP_ADD),
    KEY_PAD_DECIMAL(GLFW.GLFW_KEY_KP_DECIMAL),
    KEY_PAD_DIVIDE(GLFW.GLFW_KEY_KP_DIVIDE),
    KEY_PAD_ENTER(GLFW.GLFW_KEY_KP_ENTER),
    KEY_PAD_EQUAL(GLFW.GLFW_KEY_KP_EQUAL),
    KEY_PAD_MULTIPLY(GLFW.GLFW_KEY_KP_MULTIPLY),
    KEY_PAD_SUBTRACT(GLFW.GLFW_KEY_KP_SUBTRACT),

    ARROW_LEFT(GLFW.GLFW_KEY_LEFT),
    ARROW_RIGHT(GLFW.GLFW_KEY_RIGHT),
    ARROW_UP(GLFW.GLFW_KEY_UP),
    ARROW_DOWN(GLFW.GLFW_KEY_DOWN),

    APOSTROPHE(GLFW.GLFW_KEY_APOSTROPHE),
    BACKSLASH(GLFW.GLFW_KEY_BACKSLASH),
    BACKSPACE(GLFW.GLFW_KEY_BACKSPACE),
    CAPS_LOCK(GLFW.GLFW_KEY_CAPS_LOCK),
    COMMA(GLFW.GLFW_KEY_COMMA),
    DELETE(GLFW.GLFW_KEY_DELETE),
    END(GLFW.GLFW_KEY_END),
    ENTER(GLFW.GLFW_KEY_ENTER),
    EQUAL(GLFW.GLFW_KEY_EQUAL),
    ESCAPE(GLFW.GLFW_KEY_ESCAPE),
    GRAVE_ACCENT(GLFW.GLFW_KEY_GRAVE_ACCENT),
    HOME(GLFW.GLFW_KEY_HOME),
    INSERT(GLFW.GLFW_KEY_INSERT),
    LAST(GLFW.GLFW_KEY_LAST),
    LEFT_ALT(GLFW.GLFW_KEY_LEFT_ALT),
    LEFT_BRACKET(GLFW.GLFW_KEY_LEFT_BRACKET),
    LEFT_CONTROL(GLFW.GLFW_KEY_LEFT_CONTROL),
    LEFT_SHIFT(GLFW.GLFW_KEY_LEFT_SHIFT),
    LEFT_SUPER(GLFW.GLFW_KEY_LEFT_SUPER),
    MENU(GLFW.GLFW_KEY_MENU),
    MINUS(GLFW.GLFW_KEY_MINUS),
    NUM_LOCK(GLFW.GLFW_KEY_NUM_LOCK),
    PAGE_DOWN(GLFW.GLFW_KEY_PAGE_DOWN),
    PAGE_UP(GLFW.GLFW_KEY_PAGE_UP),
    PAUSE(GLFW.GLFW_KEY_PAUSE),
    PERIOD(GLFW.GLFW_KEY_PERIOD),
    PRINT_SCREEN(GLFW.GLFW_KEY_PRINT_SCREEN),
    RIGHT_ALT(GLFW.GLFW_KEY_RIGHT_ALT),
    RIGHT_BRACKET(GLFW.GLFW_KEY_RIGHT_BRACKET),
    RIGHT_CONTROL(GLFW.GLFW_KEY_RIGHT_CONTROL),
    RIGHT_SHIFT(GLFW.GLFW_KEY_RIGHT_SHIFT),
    RIGHT_SUPER(GLFW.GLFW_KEY_RIGHT_SUPER),
    SCROLL_LOCK(GLFW.GLFW_KEY_SCROLL_LOCK),
    SEMICOLON(GLFW.GLFW_KEY_SEMICOLON),
    SLASH(GLFW.GLFW_KEY_SLASH),
    SPACE(GLFW.GLFW_KEY_SPACE),
    TAB(GLFW.GLFW_KEY_TAB),
    WORLD_1(GLFW.GLFW_KEY_WORLD_1),
    WORLD_2(GLFW.GLFW_KEY_WORLD_2);
    private static final Map<Integer, Key> KEYS_BY_CODE = new HashMap<>();
    private final int code;

    static {
        for (Key key : values()) {
            KEYS_BY_CODE.put(key.code, key);
        }
    }

    Key(int code) {
        this.code = code;
    }

    public int getCode() {
        return code;
    }

    public static Key fromCode(int code) {
        return KEYS_BY_CODE.get(code);
    }
}
